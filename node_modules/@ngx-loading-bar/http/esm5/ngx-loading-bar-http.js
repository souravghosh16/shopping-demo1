import { __extends, __spread } from 'tslib';
import { LoadingBarService, LoadingBarModule } from '@ngx-loading-bar/core';
import { Injectable, NgModule } from '@angular/core';
import { ConnectionBackend, Http, RequestOptions, HttpModule, XHRBackend } from '@angular/http';
import { finalize } from 'rxjs/operators';

var LoadingBarHttp = /** @class */ (function (_super) {
    __extends(LoadingBarHttp, _super);
    function LoadingBarHttp(_backend, _defaultOptions, loadingBar) {
        var _this = _super.call(this, _backend, _defaultOptions) || this;
        _this.loadingBar = loadingBar;
        return _this;
    }
    LoadingBarHttp.prototype.request = function (url, options) {
        var _this = this;
        var headers = options && options.headers;
        if (!headers && url && ((url)).headers) {
            headers = ((url)).headers;
        }
        if (headers && headers.has('ignoreLoadingBar')) {
            headers.delete('ignoreLoadingBar');
            return _super.prototype.request.call(this, url, options);
        }
        var response$ = _super.prototype.request.call(this, url, options);
        if (options && options.ignoreLoadingBar === true) {
            return response$;
        }
        var started = false;
        var responseSubscribe = response$.subscribe.bind(response$);
        response$.subscribe = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this.loadingBar.start();
            started = true;
            return responseSubscribe.apply(void 0, __spread(args));
        };
        return response$.pipe(finalize(function () { return started && _this.loadingBar.complete(); }));
    };
    return LoadingBarHttp;
}(Http));
LoadingBarHttp.decorators = [
    { type: Injectable },
];
LoadingBarHttp.ctorParameters = function () { return [
    { type: ConnectionBackend, },
    { type: RequestOptions, },
    { type: LoadingBarService, },
]; };
function httpFactory(xhrBackend, requestOptions, loadingBarService) {
    return new LoadingBarHttp(xhrBackend, requestOptions, loadingBarService);
}
var LoadingBarHttpModule = /** @class */ (function () {
    function LoadingBarHttpModule() {
    }
    return LoadingBarHttpModule;
}());
LoadingBarHttpModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    HttpModule,
                    LoadingBarModule.forRoot(),
                ],
                exports: [
                    HttpModule,
                    LoadingBarModule,
                ],
                providers: [
                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions, LoadingBarService] },
                ],
            },] },
];

export { LoadingBarHttpModule, LoadingBarHttp, httpFactory as Éµa };
//# sourceMappingURL=ngx-loading-bar-http.js.map
